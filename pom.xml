<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.Auron</groupId>
	<artifactId>Auron</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>war</packaging>

 <properties>
        <!-- Explicitly declaring the source encoding eliminates the following 
            message: -->
        <!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered 
            resources, i.e. build is platform dependent! -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- JBoss dependency versions -->
        <version.wildfly.maven.plugin>1.0.2.Final</version.wildfly.maven.plugin>

        <!-- Define the version of the JBoss BOMs we want to import to specify 
            tested stacks. -->
        <version.jboss.bom>8.0.0.Final</version.jboss.bom>
        <version.arquillian.container>8.0.0.Final</version.arquillian.container>

        <!-- other plugin versions -->
        <version.compiler.plugin>3.1</version.compiler.plugin>
        <version.surefire.plugin>2.16</version.surefire.plugin>
        <version.war.plugin>2.1.1</version.war.plugin>

        <!-- maven-compiler-plugin -->
        <maven.compiler.target>1.7</maven.compiler.target>
        <maven.compiler.source>1.7</maven.compiler.source>
    </properties>



	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.jboss.spec</groupId>
				<artifactId>jboss-javaee-6.0</artifactId>
				<version>3.0.2.Final</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>javax.annotation</groupId>
				<artifactId>jsr250-api</artifactId>
				<version>1.0</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>org.jboss.spec.javax.faces</groupId>
				<artifactId>jboss-jsf-api_2.0_spec</artifactId>
				<version>1.0.0.Final</version>
				<scope>provided</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<dependencies>
		<dependency>
			<groupId>org.hibernate.javax.persistence</groupId>
			<artifactId>hibernate-jpa-2.0-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.enterprise</groupId>
			<artifactId>cdi-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>jsr250-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.spec.javax.ejb</groupId>
			<artifactId>jboss-ejb-api_3.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.spec.javax.servlet</groupId>
			<artifactId>jboss-servlet-api_3.0_spec</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.spec.javax.faces</groupId>
			<artifactId>jboss-jsf-api_2.0_spec</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.primefaces</groupId>
			<artifactId>primefaces</artifactId>
			<version>5.1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-core</artifactId>
			<version>1.2.1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-web</artifactId>
			<version>1.2.1</version>
		</dependency>
		<dependency>
			<groupId>javax</groupId>
			<artifactId>javaee-api</artifactId>
			<version>7.0</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>5.1.3.Final</version>
		</dependency>
	</dependencies>
	<build>
		<finalName>Auron</finalName>
		<plugins>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<failOnMissingWebXml>false</failOnMissingWebXml>
				</configuration>
			</plugin>
			<plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${version.compiler.plugin}</version>
                <configuration>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                </configuration>
            </plugin>
		</plugins>
	</build>

		<profiles>

			<profile>

				<!-- The default profile skips all tests, though you can tune it to run 
					just unit tests based on a custom pattern -->

				<!-- Seperate profiles are provided for running all tests, including 
					Arquillian tests that execute in the specified container -->

				<id>default</id>

				<activation>

					<activeByDefault>true</activeByDefault>

				</activation>

				<build>

					<plugins>

						<plugin>

							<artifactId>maven-surefire-plugin</artifactId>

							<version>2.16</version>

							<configuration>

								<skip>true</skip>

							</configuration>

						</plugin>

					</plugins>

				</build>

			</profile>



			<profile>



				<!-- An optional Arquillian testing profile that executes tests in your 
					WildFly instance -->

				<!-- This profile will start a new WildFly instance, and execute the 
					test, shutting it down when done -->

				<!-- Run with: mvn clean test -Parq-wildfly-managed -->

				<id>arq-wildfly-managed</id>

				<dependencies>

					<dependency>

						<groupId>org.wildfly</groupId>

						<artifactId>wildfly-arquillian-container-managed</artifactId>

						<version>${version.arquillian.container}</version>

						<scope>test</scope>

					</dependency>

				</dependencies>

			</profile>



			<profile>

				<!-- An optional Arquillian testing profile that executes tests in a 
					remote WildFly instance -->

				<!-- Run with: mvn clean test -Parq-wildfly-remote -->

				<id>arq-wildfly-remote</id>

				<dependencies>

					<dependency>

						<groupId>org.wildfly</groupId>

						<artifactId>wildfly-arquillian-container-remote</artifactId>

						<version>${version.arquillian.container}</version>

						<scope>test</scope>

					</dependency>

				</dependencies>

			</profile>



			<profile>

				<!-- When built in OpenShift the 'openshift' profile will be used when 
					invoking mvn. -->

				<!-- Use this profile for any OpenShift specific customization your app 
					will need. -->

				<!-- By default that is to put the resulting archive into the 'deployments' 
					folder. -->

				<!-- http://maven.apache.org/guides/mini/guide-building-for-different-environments.html -->

				<id>openshift</id>

				<build>

					<plugins>

						<plugin>

							<artifactId>maven-war-plugin</artifactId>

							<version>${version.war.plugin}</version>

							<configuration>

								<outputDirectory>deployments</outputDirectory>

								<warName>ROOT</warName>

							</configuration>

						</plugin>

					</plugins>

				</build>

			</profile>



		</profiles>

</project>
